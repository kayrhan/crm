<?php

namespace App\Exports;



use tFPDF;

class TicketReportPDF extends tFPDF
{
    //a4 sizes 210 x 297
    public $pageH = 297;
    public $pageW = 210;
    public $headerH = 50;
    public $footerH = 30;
    public $pageBreakmm = 50;//footer + 20
    public $positionIndent = 5; // positionlar arası boşluk
    public $thresh; // defined constructor page break threshold değeri
    public $tableHeaderRowH = 8;

    public $page_indent = 15; // for one side (left 15 right 15)
    public $sub_total = 0;
    public $firstHeader = 0;
    const summary_table_w = array(10, 10, 40, 25,25,20,25,25);
    public $organization;
    public $ticket;
    public $logo;
    public $info_mail;
    public $datas=[];
    public $total_page = 0;
    public $sub_totals = [];
    public $textHeight=4;
    const _mm_px = 0.2645833333;
    const _logo_ratio = 0.61;
    public $pageFirst = 1;
    public $posStart = 110;
    public $posEnd;
    public function __construct($orientation = 'P', $unit = 'mm', $size = 'A4')
    {
        parent::__construct($orientation, $unit, $size);
        $this->AddFont('DejaVu','','DejaVuSans.ttf',true);
        $this->AddFont('DejaVu','B','DejaVuSans-Bold.ttf',true);
        $this->thresh = $this->pageH-$this->pageBreakmm; // page break threshold


    }

    function Header()
    {


        parent::Header(); // TODO: Change the autogenerated stub
        $info = getimagesize(public_path('/images/logos/'.$this->logo));

        $img_w = intval($info[0] * self::_mm_px * self::_logo_ratio) ;// get img width
        $img_h = intval($info[1] * self::_mm_px * self::_logo_ratio); // get img height

        $this->Image(public_path('/images/logos/'.$this->logo), $this->pageW-$this->page_indent-$img_w, $this->page_indent, $img_w, $img_h);

        if($this->pageFirst!=1) {
            $this->SetY($this->headerH-5);

            $this->SetX($this->page_indent);
            $this->getSummaryTableHeader();
            $this->SetY($this->posEnd);
            //$this->drawLine($this->headerH,$this->posEnd);

        }
        // DejaVu bold 15
        //$this->SetFont('DejaVu', '', 15);






        /*$this->SetFont("DejaVu","",8.3);
        $this->AliasNbPages();
        $this->SetY($this->headerH+55);

        $this->Cell(0,10,'Seite '.$this->PageNo().'/{nb}',0,0,'R');
*/
        $this->SetY($this->headerH);




    }


    function Footer()
    {
        parent::Footer(); // TODO: Change the autogenerated stub
        //$this->SetY($this->page_indent,$this->pageH-$this->footerH);
        $line_height = 4;
        $row_height  = 4;
        $rowW = [30,30,30,45,45];
        $matrix = [
            ["getucon Gmbh","Taunusanlage 8","60329 Frankfurt" ,$this->info_mail,"Tel.: 069-34866710"],
            ["www.getucon.de","www.getudc.de","www.getusys.de" ,"www.getusoft.de","www.getumedia.de"],
            ["Amtsgericht Frankfurt","HRB beantragt","Ust-ID-NR.: beantragt" ,"GF.: Cem Güler",""],
            ["Bankverbindungen","Commerzbank","IBAN: DE48 5504 0022 0103 3513 00" ,"SWIFT/BIC: COBADEFF550",""],
            ["","Frankfurter Sparkasse","IBAN: DE73 5005 0201 0200 7682 63" ,"SWIFT/BIC: HELADEF1822",""],
        ];


        $footer_tmp_Y = $this->pageH-$this->footerH;
        $this->SetDrawColor(192,222,231);
        $this->Line($this->page_indent,$this->pageH-$this->footerH, $this->pageW-($this->page_indent),$this->pageH-$this->footerH);
        $footer_tmp_Y += 1;
        $tmpW = 0;

        for( $m =0;$m<count($matrix);$m++){
            for($n = 0;$n<count($matrix[$m]);$n++) {
                $this->SetXY($this->page_indent+$tmpW, $footer_tmp_Y);
                if(($m == 0 && $n==0) || ($m == 3 && $n ==0))
                    $this->SetFont("DejaVu", "B", 6.5);
                else
                    $this->SetFont("DejaVu", "", 6.5);
                $this->Cell($rowW[$m], $row_height, $matrix[$m][$n], 0, 1, "L");
                $footer_tmp_Y += $line_height;
            }

            $tmpW +=$rowW[$m];
            $footer_tmp_Y =  $this->pageH-$this->footerH+1;
        }


        $this->SetDrawColor(0,0,0);
        //$this->Line($this->page_indent,$this->posStart,$this->page_indent,$this->posEnd+5);
        if($this->pageFirst!=1)
            $this->drawLine($this->headerH,$this->posEnd);
        else
            $this->drawLine($this->posStart,$this->posEnd);
        $this->pageFirst = 2;


    }


    public function AcceptPageBreak()
    {
        // echo $this->total_page."\n";


        return true;
    }


    public function create_pdf($data){

        $this->organization = $data["organization"];
        $this->ticket = $data["tickets"];
        $this->ticket->total_spent_time = $data["total_spent_time"];
        $this->ticket->total_good_will_time = $data["total_good_will_time"];
        $this->logo = "getucon.png";


        $this->SetAutoPageBreak(true,$this->pageBreakmm);


        $this->AddPage();


        $this->SetFont("DejaVu","",8);
        $this->SetXY($this->page_indent,$this->headerH+10); // customer address space
        $this->getCustomerAddress();
        $this->SetFont("DejaVu","",8);
        $this->SetY($this->headerH+25); // invoice info space
        $this->getInvoiceInfo();
        $this->SetXY($this->page_indent,$this->headerH+60); // invoice start point space

        $this->getSummaryTableHeader();


        $currentY = $this->GetY();
        $this->SetXY($this->page_indent,$currentY+5);

        $this->getSummaryTablePositions();

        $currentY = $this->GetY();
        $this->SetXY($this->page_indent, $currentY+$this->tableHeaderRowH);


        return $this->Output("S"); // return document string


    }

    public function getSummaryTableHeader(){



        $header = ["Pos","#ID","Subject","Total time","Discount","Final","Create Date","Done Date"];

        $constY = $this->GetY();
        $this->SetFont("DejaVu","B",8);

        $tmpX = 0;
        for($i=0;$i<count($header);$i++) {
            if(count($header)-1 == $i){
                $this->Cell(self::summary_table_w[$i], 5, $header[$i], "R,T,B", 1,"C");
            }else {
                $this->Cell(self::summary_table_w[$i], 5, $header[$i], "L,T,B", 1, "C");
            }
            $tmpX += self::summary_table_w[$i];
            $this->SetXY($this->page_indent + $tmpX, $constY);
        }

    }

    public function getSummaryTablePositions(){
        $constY = $this->GetY();
        $this->SetFont("DejaVu","",8);
        $k = 1;
        //dd($this->ticket);
        foreach ($this->ticket as $ticket) {
            $tmpX = 0;

            for ($i = 0; $i < count(self::summary_table_w); $i++) {
                $text = "";
                if($i==0)
                    $text = $k;
                if($i==1)
                    $text = $ticket->id;

                if($i==3)
                    $text = $ticket->total_spent_time;
                if($i == 4)
                    $text = $ticket->discount;
                if($i == 5)
                    $text = $ticket->good_will_time;
                if($i == 6)
                    $text = \Carbon\Carbon::parse($ticket->created_at)->format("d.m.Y");
                if($i == 7)
                    $text = $ticket->close_date!=null?\Carbon\Carbon::parse($ticket->close_date)->format("d.m.Y"):"-";

                if($i !=2 ) {
                    $this->SetXY($this->page_indent + $tmpX, $constY);
                    $this->MultiCell(self::summary_table_w[$i], 4, $text, 0, "T");


                }

                $tmpX += self::summary_table_w[$i];

                $this->posEnd = $this->GetY();

            }
            $this->SetXY($this->page_indent + self::summary_table_w[0]+self::summary_table_w[1], $constY);
            $this->MultiCell(self::summary_table_w[2], 4, $ticket->name, 0, "T");
            $this->Line($this->page_indent,$this->GetY(),$this->pageW-$this->page_indent,$this->GetY());

            if($this->GetY()>=242){
                $this->drawLine($this->GetY(),$this->posEnd);
                $this->AddPage();
                $this->SetY($this->headerH);
            }
            $constY = $this->GetY();




            $k++;
        }
        //dd("bueda");



            $this->Line($this->page_indent, $constY, $this->pageW - $this->page_indent, $constY);
            $this->SetXY($this->page_indent + self::summary_table_w[0] + self::summary_table_w[1] + self::summary_table_w[2], $constY);
            $this->MultiCell(self::summary_table_w[2], 4, $this->ticket->total_spent_time, 0, "T");

            $this->SetXY($this->page_indent + self::summary_table_w[0] + self::summary_table_w[1] + self::summary_table_w[2] + self::summary_table_w[3] + self::summary_table_w[4], $constY);
            $this->MultiCell(self::summary_table_w[2], 4, $this->ticket->total_good_will_time, 0, "T");
            $this->Line($this->page_indent, $this->GetY(), $this->pageW - $this->page_indent, $this->GetY());
            $this->drawLine($this->GetY(), $this->posEnd);



    }



    public function getCustomerAddress(){

        $line_height = 4;
        $cell_width = 80;
        $tmp_Y= $this->GetY();
        $this->Cell($cell_width,$line_height,"getucon GmbH, Taunusanlage 8, 60329 Frankfurt",0,1,"");
        $this->Line($this->page_indent+1,$tmp_Y+$line_height,$this->GetStringWidth("getucon GmbH, Taunusanlage 8, 60329 Frankfurt")+$this->page_indent+1,$tmp_Y+$line_height);

        $tmp_Y+=$line_height+2;
        $this->SetXY($this->page_indent,$tmp_Y);

        $this->SetFont("DejaVu","",7);
        $this->Cell($cell_width,$line_height,$this->organization->org_name,0,1,"L"); // organizasyon ismi
        $tmp_Y+=$line_height;
        $this->SetXY($this->page_indent,$tmp_Y);

        $this->Cell($cell_width,$line_height,$this->organization->organization_admin,0,1,"L"); // organizasyon sahibi fatura kesilecek kişi

        $tmp_Y+=$line_height;
        $this->SetXY($this->page_indent,$tmp_Y);
        $this->Cell($cell_width,$line_height,$this->organization->address,0,1,"L"); // organizasyon adres
        $tmp_Y+=$line_height;
        $this->SetXY($this->page_indent,$tmp_Y);
        $this->Cell($cell_width,$line_height,$this->organization->zip_code." ".$this->organization->city,0,1,"L"); // organizasyon adres
    }

    public function getInvoiceInfo(){
        $line_height = 4;
        $tmp_Y=$this->GetY();

        $editor_lenght = $this->GetStringWidth("");
        $date_lenght = $this->GetStringWidth("");
        $diff = abs($editor_lenght-$date_lenght);
        $cell_width = $diff+45;

        $infoX = $this->pageW-$this->page_indent-$cell_width;

        $this->SetX($infoX);
        $this->Cell($cell_width/2,4,"Kunden Nr.:",0,0,"L");
        $this->Cell($cell_width/2,4,$this->organization->customer_no,0,0,"R"); // Customer no
        $tmp_Y+= $line_height;

        $this->SetXY($infoX,$tmp_Y);
        $this->Cell($cell_width/2,4,"Bearbeiter:",0,0,"L");
        $this->Cell($cell_width/2,4,"",0,0,"R"); // Editor
        $tmp_Y+= $line_height;

        $this->SetXY($infoX,$tmp_Y);
        $this->Cell($cell_width/2,4,"Datum:",0,0,"L");
        $this->Cell($cell_width/2,4,"",0,0,"R"); // datum

    }


    public function drawLine($start,$end){
        $one_column = 0;$two_column = 0;$three_column = 0;$four_column = 0;$five_column = 0;$six_column = 0;$seven_column = 0;
        for ($i = 0;$i<count(self::summary_table_w);$i++){
            if($i == 0)
                $one_column = self::summary_table_w[$i];
            if(in_array($i,[0,1]))
                $two_column += self::summary_table_w[$i];
            if(in_array($i,[0,1,2]))
                $three_column += self::summary_table_w[$i];
            if(in_array($i,[0,1,2,3]))
                $four_column += self::summary_table_w[$i];
            if(in_array($i,[0,1,2,3,4]))
                $five_column += self::summary_table_w[$i];
            if(in_array($i,[0,1,2,3,4,5]))
                $six_column += self::summary_table_w[$i];
            if(in_array($i,[0,1,2,3,4,5,6]))
                $seven_column += self::summary_table_w[$i];
        }

        if(count($this->ticket)>0) {
            $this->Line($this->page_indent, $start, $this->page_indent, $end);
            $this->Line($this->page_indent + $one_column, $start, $this->page_indent + $one_column, $end);
            $this->Line($this->page_indent + $two_column, $start, $this->page_indent + $two_column, $end);
            $this->Line($this->page_indent + $three_column, $start, $this->page_indent + $three_column, $end);
            $this->Line($this->page_indent + $four_column, $start, $this->page_indent + $four_column, $end);
            $this->Line($this->page_indent + $five_column, $start, $this->page_indent + $five_column, $end);
            $this->Line($this->page_indent + $six_column, $start, $this->page_indent + $six_column, $end);
            $this->Line($this->page_indent + $seven_column, $start, $this->page_indent + $seven_column, $end);
            $this->Line($this->page_indent + array_sum(self::summary_table_w), $start, $this->page_indent + array_sum(self::summary_table_w), $end);
        }

    }










    public static function convert_eol($text){

        $text = str_replace("<p><br></p><p></p>","<br>",$text);
        $text = str_replace("</p><p></p>","<br>",$text);
        $text = str_replace("<br></p><p>","<br>",$text);
        $text = str_replace("</p><p>","<br>",$text);
        $text = str_replace("<p>","",$text);
        $text = str_replace("</p>","",$text);
        $text = str_replace("<br>",PHP_EOL,$text);
        $text = str_replace("&nbsp;","",$text);

        return $text;
    }

}
